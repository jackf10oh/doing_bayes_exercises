select(Country,Country_Code,everything())
df <- df %>%
pivot_longer(names(df)[3:33],names_to="year",values_to=variable)
df <- df %>%
mutate(year=as.double(str_remove(year,"X")))
}
full_df$Country <- pivot_function("debt")$Country
full_df$year <- pivot_function("debt")$year
for(i in seq_along(variables)){
full_df[,i+3] <- pivot_function(variables[i])[,4]
}
codes <- vector()
for(code in unique(full_df$Country_Code)){
dummy=TRUE
df <- filter(full_df,Country_Code==code,
year<=1994)
for(i in 3:9){
if(sum(is.na(df[,i]))==5){
dummy=FALSE
}
}
df <- filter(full_df,Country_Code==code,
year>=2016)
for(i in 3:9){
if(sum(is.na(df[,i]))==5){
dummy=FALSE
}
}
if(dummy==TRUE){
codes <- c(codes,code)
}
}
codes <- data.frame(codes)
names(codes) <- c("Country_Code")
full_df <- full_df %>%
inner_join(codes)
# install.packages("simputation")
library(simputation)
full_df <- full_df %>%
impute_lm(debt ~ year*Country_Code) %>%
impute_lm(inflation ~ year*Country_Code) %>%
impute_lm(electricity ~ year*Country_Code) %>%
impute_lm(life_expectancy ~ year*Country_Code) %>%
impute_lm(lending ~ year*Country_Code) %>%
impute_lm(unemployment ~ year*Country_Code) %>%
impute_lm(gdp ~ year*Country_Code)
install.packages("plotly")
library(plotly)
p <- full_df %>%
ggplot() +
geom_line(mapping <- aes(x=year,y=gdp,color=Country_Code))
ggplotly(p)
install.packages("ggrepel")
Label = c("Mexico",
"India")
p <- full_df %>%
mutate(label = ifelse(Country %in% Label & year==2020, Country, NA)) %>%
ggplot(aes(x=year,
y=gdp,
color=Country_Code,
label=label)) +
geom_line() +
geom_text(nudge_x = -2,nudge_y = 1,check_overlap = TRUE) +
labs(title="GDP 1990-2020") +
ylab("GDP") +
xlab("Year")
ggplotly(p)
p <- full_df %>%
ggplot(mapping <- aes(x=gdp,
y=inflation,
color=Country_Code,
frame=year)) +
geom_point() +
scale_y_continuous(limits=c(0,20)) +
xlab("GDP") +
ylab("Inflation") +
labs(title="Inflation vs GDP over time")
ggplotly(p)
full_df
? pivot_wider
full_df %>%
select(Country_Code,Country,year,debt)
full_df %>%
select(Country_Code,Country,year,debt) %>%
pivot_wider(names_from=year)
full_df %>%
select(Country_Code,Country,year,debt) %>%
pivot_wider(names_from=year,values_from=debt)
full_df %>%
select(Country_Code,Country,year,debt,inflation) %>%
pivot_wider(names_from=year,values_from=debt,inflation)
full_df %>%
select(Country_Code,Country,year,debt,inflation) %>%
pivot_wider(names_from=year,values_from=debt)
full_df %>%
select(Country_Code,Country,year,debt) %>%
pivot_wider(names_from=year,values_from=debt)
full_df %>%
select(Country_Code,Country,year,debt,inflation) %>%
pivot_wider(names_from=year,year,values_from=debt,inflation)
full_df %>%
select(Country_Code,Country,year,debt) %>%
pivot_wider(names_from=year,values_from=debt)
full_df %>%
select(Country_Code,Country,year,debt) %>%
pivot_wider(names_from=year,values_from=debt,names_prefix="debt")
full_df %>%
pivot_wider(names_from=year,values_from=debt,names_prefix="debt")
full_df %>%
pivot_wider(names_from=year,values_from=debt,inflation,names_prefix="debt")
full_df %>%
pivot_wider(names_from=year,values_from=debt,inflation)
full_df %>%
pivot_wider(id_cols=Country,Country_Code,names_from=year,values_from=debt,inflation)
full_df %>%
select(Country,Country_Code,year,debt)
full_df %>%
select(Country,Country_Code,year,debt) %>%
pivot_wider(id_cols=c(Country,Country_Code),
names_from=year,
values_from=debt)
full_df %>%
select(Country,Country_Code,year,debt,inflation) %>%
pivot_wider(id_cols=c(Country,Country_Code),
names_from=year,
values_from=c(debt,inflation))
View(full_df)
full_df %>%
pivot_wider(id_cols=c(Country,Country_Code),
names_from=year,
values_from=c(debt,
electricity,
inflation,
lending,
life_expectancy,
unemployment,
gdp
))
head(df_wide)
df_wide <- full_df %>%
pivot_wider(id_cols=c(Country,Country_Code),
names_from=year,
values_from=c(debt,
electricity,
inflation,
lending,
life_expectancy,
unemployment,
gdp
))
head(df_wide)
install.packages("alr4")
install.packages("alr4")
library(tidyverse)
```{r message=FALSE}
library(alr4)
library(tidyverse)
csv = read_csv("ames_real_estate.csv")
csv
names
names(csv)
csv %>%
ggplot(mapping <- aes(x=SqFt,y=SalePrice)) +
geom_point()
csv %>%
ggplot(mapping <- aes(x=SqFt,y=SalePrice)) +
geom_point() +
labs(title="Sale Price vs. Square Footage of Homes")
csv %>%
ggplot(mapping <- aes(x=SqFt,y=SalePrice)) +
geom_point() +
labs(title="Sale Price vs. Square Footage of Homes") +
xlab("Square Footage") +
ylab("Sale Price")
csv %>%
group_by(Neighborhood)
csv %>%
select(Neighborhood,SalePrice)
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(Neighborhood=Neighborhood,minimum=min(),maximum=max())
csv = read_csv("ames_real_estate.csv")
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(Neighborhood=Neighborhood,minimum=min(value),maximum=max(value))
csv = read_csv("ames_real_estate.csv")
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(Neighborhood=Neighborhood)
csv = read_csv("ames_real_estate.csv")
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(Neighborhood=Neighborhood,minimum=min(SalePrice))
csv = read_csv("ames_real_estate.csv")
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(minimum=min(SalePrice))
csv = read_csv("ames_real_estate.csv")
csv %>%
select(Neighborhood,SalePrice) %>%
group_by(Neighborhood) %>%
summarise(minimum=min(SalePrice),maximum=max(SalePrice))
# part b
csv %>%
ggplot(mapping <- aes(x=SqFt,y=SalePrice)) +
geom_point() +
labs(title="Sale Price vs. Square Footage of Homes") +
xlab("Square Footage") +
ylab("Sale Price")
Heights
Heights %>%
filter(mheight >60)
Heights %>%
filter(mheight >60) %>%
summarise(average_daughter_height=mean(dheight))
Heights %>%
filter(mheight >60) %>%
summarise(average_daughter_height=mean(dheight))
x <- runif(10000,min=0,max=1)
qnorm(0.5,mean=0,sd=1)
qnorm(0.99,mean=0,sd=1)
y <- qnorm(p=x,mean=0,sd=1)
hist(y)
setwd("C:/Users/jackf/Desktop/Coding/R/Bayes Analysis")
knitr::opts_chunk$set(echo = TRUE)
source("DBDA2Eprograms")
knitr::opts_chunk$set(echo = TRUE)
source("DBDA2Eprograms/DBDA2E-utilities.R")
run("Jags-Ydich-XnomSsubj-MbernBetaExample.R")
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBetaExample.R")
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBeta-Example.R")
source("DBDA2Eprograms/DBDA2E-utilities.R")
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBeta-Example.R")
ls()
knitr::opts_chunk$set(echo = TRUE)
source("DBDA2Eprograms/DBDA2E-utilities.R")
?read.csv
?csv
??csv
data.frame(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
)
data.frame(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"
)
df <- data.frame(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"
)
View(df)
?data.frame
?reshape
?coerce
matrix
1,"Reginald",
matrix()
matrix(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"
)
m <- matrix(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"
)
?matrix
m <- matrix(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",ncol=2
)
m <- matrix(
data=c()
1,"Reginald",
m <- matrix(
data=c(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"),ncol=2
)
m
View(m)
m <- matrix(
data=c(
1,"Reginald",
0,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
1,"Reginald",
0,"Reginald",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony",
0,"Tony",
1,"Tony",
0,"Tony"),
ncol=2,
byrow = TRUE
)
df <- as.data.frame(m)
df
names(df) <- y,s
names(df) <- c("y","s")
df
?write.csv
write.csv(df,file="chpt8_example_csv.csv")
# Example for Jags-Ydich-XnomSsubj-Mbernbeta.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Load The data
myData = read.csv("chpt8_example_csv.csv")
# N.B.: The functions below expect the data to be a data frame,
# with one component named y being a vector of integer 0,1 values,
# and one component named s being a factor of subject identifiers.
myData$s = factor( myData$s )
?factor
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBeta.R")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBeta.R")
setwd("C:/Users/jackf/Desktop/Coding/R/Bayes Analysis")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBeta.R")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("DBDA2Eprograms/Jags-Ydich-XnomSsubj-MbernBeta.R")
#-------------------------------------------------------------------------------
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "Jags-Ydich-XnomSsubj-MbernBeta-"
graphFileType = "eps"
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
install.packages("rjags")
library(rjags)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rjags")
source("DBDA2Eprograms/DBDA2E-utilities.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
library(rjags)
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
install.packages("rjags")
library(rjags)
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
library(rjags)
install.packages("runjags")
install.packages("runjags")
library(rjags)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rjags")
source("DBDA2Eprograms/DBDA2E-utilities.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
install.packages("rjags")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
?jags.model
library(jags)
library(rjags)
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , numSavedSteps=50000 , saveName=fileNameRoot )
jags.model()
library(rjags)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rjags")
source("DBDA2Eprograms/DBDA2E-utilities.R")
# A complete example, 8.2
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2Eprograms/DBDA2E-utilities.R")
install.packages("rjags")
require(rjags)
install.packages("rjags")
install.packages("rjags")
install.packages("rjags")
install.packages("rjags")
source("C:/Users/jackf/Desktop/Coding/R/Bayes Analysis/Jags-ExampleScript.R", echo=TRUE)
source("C:/Users/jackf/Desktop/Coding/R/Bayes Analysis/Jags-ExampleScript.R", echo=TRUE)
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
# Load the functions used below:
source("DBDA2E-utilities.R") # Must be in R's current working directory.
setwd("C:/Users/jackf/Desktop/Coding/R/Bayes Analysis/DBDA2Eprograms")
# Load the functions used below:
source("DBDA2E-utilities.R") # Must be in R's current working directory.
# Load the functions used below:
source("DBDA2E-utilities.R") # Must be in R's current working directory.
# Load the functions used below:
source("DBDA2E-utilities.R") # Must be in R's current working directory.
